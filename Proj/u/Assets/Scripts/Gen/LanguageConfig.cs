// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gen/xls2proto/LanguageConfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace X.Res {

  /// <summary>Holder for reflection information generated from gen/xls2proto/LanguageConfig.proto</summary>
  public static partial class LanguageConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for gen/xls2proto/LanguageConfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LanguageConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJnZW4veGxzMnByb3RvL0xhbmd1YWdlQ29uZmlnLnByb3RvEgVYLlJlcyJr",
            "Cg5MYW5ndWFnZUNvbmZpZxIOCgZ0eHRfaWQYASABKA0SDQoFY291bnQYAiAB",
            "KA0SCgoCZW4YAyABKAkSCgoCY24YBCABKAkSEAoIZm9udHNpemUYBSADKA0S",
            "EAoIZm9udHR5cGUYBiADKAkiPAoUTGFuZ3VhZ2VDb25maWdfQVJSQVkSJAoF",
            "aXRlbXMYASADKAsyFS5YLlJlcy5MYW5ndWFnZUNvbmZpZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::X.Res.LanguageConfig), global::X.Res.LanguageConfig.Parser, new[]{ "TxtId", "Count", "En", "Cn", "Fontsize", "Fonttype" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::X.Res.LanguageConfig_ARRAY), global::X.Res.LanguageConfig_ARRAY.Parser, new[]{ "Items" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LanguageConfig : pb::IMessage<LanguageConfig> {
    private static readonly pb::MessageParser<LanguageConfig> _parser = new pb::MessageParser<LanguageConfig>(() => new LanguageConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LanguageConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::X.Res.LanguageConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageConfig(LanguageConfig other) : this() {
      txtId_ = other.txtId_;
      count_ = other.count_;
      en_ = other.en_;
      cn_ = other.cn_;
      fontsize_ = other.fontsize_.Clone();
      fonttype_ = other.fonttype_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageConfig Clone() {
      return new LanguageConfig(this);
    }

    /// <summary>Field number for the "txt_id" field.</summary>
    public const int TxtIdFieldNumber = 1;
    private uint txtId_;
    /// <summary>
    ///* 文本id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TxtId {
      get { return txtId_; }
      set {
        txtId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    /// <summary>
    ///* 字符串匹配的个数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "en" field.</summary>
    public const int EnFieldNumber = 3;
    private string en_ = "";
    /// <summary>
    ///* 英文 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string En {
      get { return en_; }
      set {
        en_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cn" field.</summary>
    public const int CnFieldNumber = 4;
    private string cn_ = "";
    /// <summary>
    ///* 中文 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cn {
      get { return cn_; }
      set {
        cn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fontsize" field.</summary>
    public const int FontsizeFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_fontsize_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> fontsize_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///* 字体字号 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Fontsize {
      get { return fontsize_; }
    }

    /// <summary>Field number for the "fonttype" field.</summary>
    public const int FonttypeFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_fonttype_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> fonttype_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 字体类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Fonttype {
      get { return fonttype_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LanguageConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LanguageConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TxtId != other.TxtId) return false;
      if (Count != other.Count) return false;
      if (En != other.En) return false;
      if (Cn != other.Cn) return false;
      if(!fontsize_.Equals(other.fontsize_)) return false;
      if(!fonttype_.Equals(other.fonttype_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TxtId != 0) hash ^= TxtId.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (En.Length != 0) hash ^= En.GetHashCode();
      if (Cn.Length != 0) hash ^= Cn.GetHashCode();
      hash ^= fontsize_.GetHashCode();
      hash ^= fonttype_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TxtId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TxtId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
      if (En.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(En);
      }
      if (Cn.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Cn);
      }
      fontsize_.WriteTo(output, _repeated_fontsize_codec);
      fonttype_.WriteTo(output, _repeated_fonttype_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TxtId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TxtId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (En.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(En);
      }
      if (Cn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cn);
      }
      size += fontsize_.CalculateSize(_repeated_fontsize_codec);
      size += fonttype_.CalculateSize(_repeated_fonttype_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LanguageConfig other) {
      if (other == null) {
        return;
      }
      if (other.TxtId != 0) {
        TxtId = other.TxtId;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.En.Length != 0) {
        En = other.En;
      }
      if (other.Cn.Length != 0) {
        Cn = other.Cn;
      }
      fontsize_.Add(other.fontsize_);
      fonttype_.Add(other.fonttype_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TxtId = input.ReadUInt32();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
          case 26: {
            En = input.ReadString();
            break;
          }
          case 34: {
            Cn = input.ReadString();
            break;
          }
          case 42:
          case 40: {
            fontsize_.AddEntriesFrom(input, _repeated_fontsize_codec);
            break;
          }
          case 50: {
            fonttype_.AddEntriesFrom(input, _repeated_fonttype_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LanguageConfig_ARRAY : pb::IMessage<LanguageConfig_ARRAY> {
    private static readonly pb::MessageParser<LanguageConfig_ARRAY> _parser = new pb::MessageParser<LanguageConfig_ARRAY>(() => new LanguageConfig_ARRAY());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LanguageConfig_ARRAY> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::X.Res.LanguageConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageConfig_ARRAY() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageConfig_ARRAY(LanguageConfig_ARRAY other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageConfig_ARRAY Clone() {
      return new LanguageConfig_ARRAY(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::X.Res.LanguageConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::X.Res.LanguageConfig.Parser);
    private readonly pbc::RepeatedField<global::X.Res.LanguageConfig> items_ = new pbc::RepeatedField<global::X.Res.LanguageConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::X.Res.LanguageConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LanguageConfig_ARRAY);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LanguageConfig_ARRAY other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LanguageConfig_ARRAY other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
