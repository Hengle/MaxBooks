//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using xc.protocol;
using Net;
namespace xc
{
    [wxb.Hotfix]
    public class RideCtrl :BaseCtrl
    {
        public static readonly  string ANIMATION_RIDE = "ride";
        public static readonly  string IDLE = "idle";
        public static readonly  string RUN = "run";
        public static readonly  string RUN_MAIN = "run_map";
        private uint mCurrentRideId = 0; // 0 implies current not riding, but maybe you have a horse but cannot ride in some situations
        public DBGrowSkin.DBGrowSkinItem GrowSkinItem { get { return mGrowSkinItem; } }
        private DBGrowSkin.DBGrowSkinItem mGrowSkinItem;
        private int mDirtyRideId = -1;//the request ride id, <0 implies no request, 0 implies request to unride, >0 request ride

        private uint mRemotePlayerUsingRideId = 0;//for remoteplayer
        private bool mRemotePlayerServerStatuesRiding = false;// for remoteplayer

        private ClientModel mRiderActor ;
        private string mRideAnim;

        private bool mIsprocessingRide = false;

        private System.Action mRideFinishCallback = null;
        private System.Action mUnRideFinishCallback = null;

        private Vector3 mOriginalScale = Vector3.one;

        public RideCtrl(Actor owner)
            :base(owner)
        {

        }

        public override void Update()
        {
            base.Update();
            // 可以执行上下坐骑操作必须满足的情况
            //(1)正在变身状态或者正在进行变身模型/原始模型的加载
            //(2)角色初始的资源加载完毕
            //(3)角色可见
            //(4)不在加载坐骑模型
            //(5)AvatarCtrl不在加载模型
            //(6)mDirtyRideId>=0
            //(7)角色不处在攻击状态
            if (mOwner.IsShapeShift == false && mOwner.IsShapeProcessing == false && mOwner.IsResLoaded && mOwner.mAvatarCtrl.IsModelVisible() && !IsLoadingRide() && !mOwner.mAvatarCtrl.IsProcessingModel && mDirtyRideId >= 0 && mOwner.IsAttacking() == false)
            {
                if (mDirtyRideId == 0)//mDirtyRideId为0时下坐骑
                {
                    ActorManager.Instance.StartCoroutine(UnRideAsync());
                }
                else if(mOwner.IsDead() == false)//mDirtyRideId>0时上坐骑
                {
                    if (mOwner.IsPlayer() && ((mOwner as Player).IsShowPickUpBossChip || (mOwner is LocalPlayer && InstanceHelper.IsJumpingOut())))//在拾取BOSS阶段不能上坐骑
                        return;
                    ActorManager.Instance.StartCoroutine(RideAync());
                }
            }
        }

        public override void Destroy()
        {
            base.Destroy();

            if (mRiderActor != null)
            {
                ActorManager.Instance.DestroyActor(mRiderActor.UID);
                mRiderActor = null;
            }
            mCurrentRideId = 0;
        } 

        public ClientModel Rider
        {
            get{ 
                return mRiderActor;
            }
        }

        public static bool IsUnrideScene()
        {
            if (SceneHelp.Instance == null)
                return false;
            if (SceneHelp.Instance.CanRide)
                return false;
            return true;

            /*暂时场景对坐骑不做限制
            var curState = Game.GetInstance().GetFSM().GetCurState();
            //if (curState is GvGInstanceState || 
            //    curState is TreasureCaveInstanceState || 
            //    curState is RobFlagInstanceState)
            //{
            //    return true;
            //}
            if (curState is CommonInstanceState)
            {
                var commState = curState as CommonInstanceState;
                return !((commState.Flag & InstanceFlag.CanRide) == InstanceFlag.CanRide);
            }
            else
            {
                return false;
            }*/
        }

        //ride and unride op
        public void Ride(uint id, bool syncToServer, System.Action finishCallback = null)
        {
            if (SceneHelp.Instance.CanRide == false)
                return;
            //检查坐骑资源是否存在
            DBGrowSkin db_skin = DBManager.Instance.GetDB<DBGrowSkin>();
            DBGrowSkin.DBGrowSkinItem skin_item = null;
            if (db_skin != null)
                skin_item = db_skin.GetOneItem(GameConst.GROW_TYPE_RIDE, id);
            if (skin_item != null)
            {
                if (ClientModel.HasExistResourceActorId(skin_item.ActorId) == false)
                    return;//不存在资源
            }


            mDirtyRideId = (int)id;
            mRideFinishCallback = finishCallback;
            if (mOwner is LocalPlayer && syncToServer)
            {
                //C2SShowRide pack = new C2SShowRide();
                //pack.state = 1;

                //NetClient c = null;
                //if(SceneHelp.Instance.IsInMainmap())
                //{
                //    c = NetClient.GetBaseClient();
                //}
                //else
                //    c = NetClient.GetCrossClient();
                //c.SendData<C2SShowRide>(NetMsg.MSG_SHOW_RIDE, pack);
            }
        }

        public void UnRide(bool syncToServer, System.Action finishCallback = null)
        {
            mDirtyRideId = 0;
            mUnRideFinishCallback = finishCallback;
            if (mOwner is LocalPlayer && syncToServer)
            {
                //C2SShowRide pack = new C2SShowRide();
                //pack.state = 0; 

                //NetClient c = null;
                //if(SceneHelp.Instance.IsInMainmap())
                //{
                //    c = NetClient.GetBaseClient();
                //}
                //else
                //    c = NetClient.GetCrossClient();
                //c.SendData<C2SShowRide>(NetMsg.MSG_SHOW_RIDE, pack);
            }
        }


        public bool IsRiding()
        {
            return mCurrentRideId != 0;
        }

        public bool IsRideTobeLoaded()
        {
            return mDirtyRideId >= 0 || mIsprocessingRide || !mOwner.IsResLoaded;
        }

        public bool IsLoadingRide()
        {
            return mIsprocessingRide;
        }

        //for remote player sync ride status
        public uint RemotePlayerUsingRideId
        {
            set{
                if(mRemotePlayerUsingRideId == value)
                {
                    return;
                }
                mRemotePlayerUsingRideId = value;
                if(mRemotePlayerServerStatuesRiding )
                {
                    Ride(mRemotePlayerUsingRideId, false);
                }
            }
            get
            {
                return mRemotePlayerUsingRideId;
            }
        }


        public bool RemotePlayerServerStatusRiding
        {
            set
            {
                if(mRemotePlayerServerStatuesRiding == value)
                {
                    return;
                }
                mRemotePlayerServerStatuesRiding = value;
                if(mRemotePlayerServerStatuesRiding )
                {
                    Ride(mRemotePlayerUsingRideId, false);
                }
                else
                {
                    UnRide(false);
                }
            }
            get
            {
                return mRemotePlayerServerStatuesRiding;
            }
        }

        public void RemotePlayerRefreshRideStatus()
        {
            if (mRemotePlayerServerStatuesRiding)
            {
                Ride(mRemotePlayerUsingRideId, false);
            }
            else
            {
                UnRide(false);
            }
        }

        public bool RemotePlayerShouldRiding()
        {
            return  mRemotePlayerUsingRideId != 0 && mCurrentRideId == 0;
        }

        public void SyncAnim(string anim)
        {
            if (!IsRiding())
            {
                //Debug.LogError(string.Format("IsRiding false 111"));
                return;
            }
            if (mRiderActor == null)
            {
                //Debug.LogError(string.Format("IsRiding 222"));
                return;
            }
            if (anim == RUN || anim == RUN_MAIN)
            {
                // 暂时屏蔽，坐骑功能需要重新测试
                if(mGrowSkinItem != null && mGrowSkinItem.RunActionWhenRiding.Length > 0)
                    mRiderActor.Play(mGrowSkinItem.RunActionWhenRiding);
                else
                    mRiderActor.Play(string.Format("{0}{1}", mRideAnim, RUN));

                //Debug.LogError(string.Format("IsRiding RUN anim = {0}", anim));
            }
            else
            {
                // 暂时屏蔽，坐骑功能需要重新测试
                if (mGrowSkinItem != null && mGrowSkinItem.IdleActionWhenRiding.Length > 0)
                    mRiderActor.Play(mGrowSkinItem.IdleActionWhenRiding);
                else
                    mRiderActor.Play(string.Format("{0}{1}", mRideAnim, IDLE));
                //mRiderActor.GetComponent<Animation>().Play(string.Format("{0}{1}", mRideAnim, IDLE));
                //Debug.LogError(string.Format("IsRiding IDLE anim = {0}", anim));
            }
        }

        public string GetIdleActionWhenRidingName()
        {
            if (mGrowSkinItem != null && mGrowSkinItem.IdleActionWhenRiding.Length > 0)
                return mGrowSkinItem.IdleActionWhenRiding;
            else
                return string.Format("{0}{1}", mRideAnim, IDLE);
        }

        //only directly called for local player, initiative ride
        private IEnumerator RideAync()
        {
            mOriginalScale = Vector3.one;

            if (this == null || this.IsDestroy || mOwner == null || mOwner.IsDestroy)
                yield break;

            if (mOwner.mVisibleCtrl != null && mOwner.mVisibleCtrl.VisibleMode != EVisibleMode.Visible)
            {
                yield break;
            }
            if (mOwner.mAvatarCtrl == null)
                yield break;
            if (mCurrentRideId == mDirtyRideId)
            {
                mDirtyRideId = -1;
                yield break;
            }

            //test some situation
            if (!TestRide())
            {
                yield break;
            }

            mCurrentRideId = (uint)mDirtyRideId;
            mDirtyRideId = -1;

            DBGrowSkin db_skin = DBManager.Instance.GetDB<DBGrowSkin>();
            DBGrowSkin.DBGrowSkinItem skin_item = null;
            if (db_skin != null)
                skin_item = db_skin.GetOneItem(GameConst.GROW_TYPE_RIDE, mCurrentRideId);
            if (skin_item != null)
            {
                if (ClientModel.HasExistResourceActorId(skin_item.ActorId) == false)
                    yield break;//不存在资源
            }

            mIsprocessingRide = true;

            //clone rider
            if (mRiderActor != null)
            {
                if(mRiderActor.transform != null)
                    mRiderActor.transform.parent = null;
            }
            else
            {
                mRiderActor = ClientModel.CreateClientModelByClone(mOwner, null);
                if(this == null || this.IsDestroy || mOwner == null || mOwner.IsDestroy || mRiderActor == null || mRiderActor.IsDestroy)
                {
                    mIsprocessingRide = false;
                    yield break;
                }

                // 设置坐骑的阴影状态
                var rider_shadow_behavior = mRiderActor.GetBehavior<ShadowBehavior>();
                var owner_shadow_behavior = mOwner.GetBehavior<ShadowBehavior>();
                if (rider_shadow_behavior != null && owner_shadow_behavior != null)
                {
                    if (owner_shadow_behavior.ShadowType == ShadowType.REAL_SHADOW)
                        rider_shadow_behavior.ShadowType = ShadowType.REAL_SHADOW;
                    else
                        rider_shadow_behavior.ShadowType = ShadowType.NONE;

                    rider_shadow_behavior.RealShadow = owner_shadow_behavior.RealShadow;
                }

                while (this != null && this.IsDestroy == false && mRiderActor != null && mRiderActor.IsDestroy == false &&
                    (mRiderActor.mAvatarCtrl == null || mRiderActor.mAvatarCtrl.IsLoading(true)))
                {
                    if(mOwner == null || mOwner.IsDestroy)
                    {
                        mIsprocessingRide = false;
                        yield break;
                    }
                    yield return null;
                }
            }
            if (this == null || this.IsDestroy)
                yield break;
            if (mOwner == null || mOwner.IsDestroy || mOwner.mAvatarCtrl == null)
            {
                mIsprocessingRide = false;
                yield break;
            }
           // DBGrowSkin db_skin = DBManager.Instance.GetDB<DBGrowSkin>();
           // DBGrowSkin.DBGrowSkinItem skin_item = null;
            //if(db_skin != null)
                //skin_item = db_skin.GetOneItem(GameConst.GROW_TYPE_RIDE, mCurrentRideId);
            mGrowSkinItem = skin_item;
            if(skin_item != null && mOwner != null && mOwner.IsDestroy == false && mOwner.mAvatarCtrl != null)
            {
                string prefab_name = RoleHelp.GetPrefabName(skin_item.ActorId, mOwner.mAvatarCtrl.IsLocalPlayerModel());
                if (string.IsNullOrEmpty(prefab_name))
                {
                    mOwner.mAvatarCtrl.ModelPrefab = null;
                    mIsprocessingRide = false;
                    yield break;
                }
                else
                    mOwner.mAvatarCtrl.ModelPrefab = prefab_name;
            }
            else
            {
                mIsprocessingRide = false;
                yield break;
            }
            if(ActorManager.Instance == null)
            {
                mIsprocessingRide = false;
                yield break;
            }
            yield return ActorManager.Instance.StartCoroutine(mOwner.mAvatarCtrl.LoadAsync_public());

            while (this != null && this.IsDestroy == false && mOwner != null && mOwner.IsDestroy == false && mOwner.mAvatarCtrl != null && mOwner.mAvatarCtrl.IsLoading(true))
            {
                yield return null;

            }
            if (this == null || this.IsDestroy)
                yield break;
            if (mOwner == null || mOwner.IsDestroy || mOwner.transform == null)
            {
                mIsprocessingRide = false;
                yield break;
            }

            if (skin_item != null && mOwner != null && mOwner.IsDestroy == false && mOwner.mAvatarCtrl != null)
            {
                mOriginalScale = mOwner.mAvatarCtrl.ModelScale;
                mOwner.mAvatarCtrl.ModelScale = RoleHelp.GetPrefabScale(skin_item.ActorId);
            }

            //mount
            Transform mountPoint = xc.ui.ugui.UIHelper.FindChildInHierarchy(mOwner.transform, AvatarCtrl.MOUNT_POINT_NAME);
            if (mountPoint == null)
            {
                Debug.LogError(string.Format("mount point not found for {0}", AvatarCtrl.MOUNT_POINT_NAME, mCurrentRideId));
                //mount rider
                mIsprocessingRide = false;
                yield break;
            }
            float height = mountPoint.position.y - mOwner.transform.position.y;
            if (mRiderActor != null && mRiderActor.transform != null)
            {
                mRiderActor.transform.parent = mountPoint;
                mRiderActor.transform.position = mountPoint.position;
                mRiderActor.transform.localEulerAngles = new Vector3(0, 0, 0);
                mRiderActor.mAvatarCtrl.ResetElfinObject();
                mRiderActor.mAvatarCtrl.ResetSuitPos();
            }

                //animate
            mRideAnim = ANIMATION_RIDE;
            if (mOwner.IsWalking())
                mOwner.Play(Actor.EAnimation.walk);
            else
                mOwner.Play(Actor.EAnimation.idle);

            //mOwner.PlayLastAnimation_real();
            //mOwner.Play("idle");
            for (int index = 1; index < 3; ++index)
            {
                yield return null;
            }
            if (this == null || this.IsDestroy)
                yield break;

            //mount rider
            mIsprocessingRide = false;

            if(mOwner == null || mOwner.IsDestroy || mOwner.transform == null || mRiderActor == null || mRiderActor.transform == null)
            {
                yield break;
            }
            mountPoint = xc.ui.ugui.UIHelper.FindChildInHierarchy(mOwner.transform, AvatarCtrl.MOUNT_POINT_NAME);
            Transform bip_transform = xc.ui.ugui.UIHelper.FindChildInHierarchy(mRiderActor.transform, "Bip001");
            if(mountPoint != null && bip_transform != null)
                mRiderActor.transform.localPosition = mountPoint.InverseTransformVector(mountPoint.position - bip_transform.position);

            //VocationInfo info = DBVocationInfo.Instance.GetVocationInfo((byte)mOwner.VocationID);
            string idle_action_name = GetIdleActionWhenRidingName();
            Vector3 mount_offset = DBVocationMountInfo.Instance.GetMountOffset((byte)mOwner.VocationID, idle_action_name);
            if (mount_offset.magnitude > 0.001f)
                mRiderActor.transform.localPosition = mount_offset;

            mOwner.ResetEffect();
            if (mOwner.MoveImplement != null)
                mOwner.MoveImplement.OnResLoaded();

            mOwner.OnModelChanged();

            if (mRiderActor.mAvatarCtrl != null)
            {
                mRiderActor.mAvatarCtrl.SetLayer(mOwner.GetLayer());
            }
            if (mRideFinishCallback != null)
            {
                mRideFinishCallback();
                mRideFinishCallback = null;
            }
        }

        //you should call unride when destroy
        private IEnumerator UnRideAsync()
        {
            if (mOwner == null || mOwner.IsDestroy)
                yield break;
            if (mOwner.mVisibleCtrl != null && mOwner.mVisibleCtrl.VisibleMode != EVisibleMode.Visible)
            {
                yield break;
            }

            mDirtyRideId = -1;

            if (mCurrentRideId == 0)
            {
                yield break;
            }
           
            mCurrentRideId = 0;
            if (mRiderActor == null)
            {
                yield break;
            }
             
            mIsprocessingRide = true;

            //unbind
            mRiderActor.GetModelParent().transform.parent = null;

            if (Owner == null || Owner.IsDestroy || mOwner.mAvatarCtrl == null)
            {
                mIsprocessingRide = false;
                yield break;
            }
            //load ride
            mOwner.mAvatarCtrl.CloneAvatar(mRiderActor, false);

            //destroy rider
            if (mRiderActor != null)
                ActorManager.Instance.DestroyActor(mRiderActor.UID);
            mRiderActor = null;

            yield return ActorManager.Instance.StartCoroutine(mOwner.mAvatarCtrl.LoadAsync_public());

            while (mOwner != null && mOwner.IsDestroy == false && mOwner.mAvatarCtrl != null && mOwner.mAvatarCtrl.IsLoading(true))
            {
                yield return null;
            }
            if(mOwner == null || mOwner.IsDestroy || mOwner.mAvatarCtrl == null)
            {
                mIsprocessingRide = false;
                yield break;
            }
            ////destroy rider
            //if(mRiderActor != null)
            //    ActorManager.Instance.DestroyActor(mRiderActor.UID);
            //mRiderActor = null;
            mIsprocessingRide = false;
            if (mOwner == null || mOwner.IsDestroy || mOwner.mAvatarCtrl == null)
            {
                yield break;
            }
            //if(Owner.IsDead())
            if (Owner.IsAttacking() == false || Owner.IsDead())
            {
                if(Owner.IsDead())
                    mOwner.Play(Actor.EAnimation.death);
                else if (mOwner.IsWalking())
                    mOwner.Play(Actor.EAnimation.walk);
                else
                    mOwner.Play(Actor.EAnimation.idle);
                //mOwner.PlayLastAnimation_real();
            }

            mOwner.ResetEffect();
            if (mOwner.MoveImplement != null)
                mOwner.MoveImplement.OnResLoaded();
            mOwner.OnModelChanged();
            if (mUnRideFinishCallback != null)
            {
                mUnRideFinishCallback();
                mUnRideFinishCallback = null;
            }

            if (mOriginalScale.Equals(Vector3.zero) == false)
            {
                mOwner.mAvatarCtrl.ModelScale = mOriginalScale;
            }
        }
            
        private bool TestRide()
        {
            if (IsUnrideScene())
            {
                return false;
            }
            if (this == null || this.IsDestroy || mOwner == null || mOwner.IsDestroy)
                return false;
            if (mOwner.DisableMoveState)
            {
                return false;
            }
            if (mOwner.ActorMachine!= null && mOwner.ActorMachine.FSM != null)
            {
                xc.ActMachine.State cur_state = mOwner.ActorMachine.FSM.GetCurState();
                if (cur_state == null)
                    return false;
                ActorMachine.EFSMState stateId = (ActorMachine.EFSMState)cur_state.GetID();
                if (stateId == ActorMachine.EFSMState.DS_BeAttacking || stateId == ActorMachine.EFSMState.DS_Attacking)
                {
                    return false;
                }
            }
            return true;
        }

        public void Init(xc.UnitCacheInfo info)
        {
            if(mOwner != null && mOwner is LocalPlayer)
            {
                RemotePlayerUsingRideId = LocalPlayerManager.Instance.MountId;
                if (RemotePlayerUsingRideId != 0)
                    RemotePlayerServerStatusRiding = true;
                else
                    RemotePlayerServerStatusRiding = false;
            }
            else
            {
                if(mOwner != null)
                {
                    RemotePlayerUsingRideId = mOwner.MountId;
                    if (RemotePlayerUsingRideId != 0)
                        RemotePlayerServerStatusRiding = true;
                    else
                        RemotePlayerServerStatusRiding = false;
                }
            }
//            this.RemotePlayerServerStatusRiding = info.AOIPlayer.ride_state == 0 ? false : true;
//             if (info.AOIPlayer.fashions != null)
//             {
//                 foreach (uint fashion in info.AOIPlayer.fashions)
//                 {
//                     if(!DBManager.Instance.GetDB<DBAvatarPart>().mData.ContainsKey(fashion))
//                     {
//                         continue;
//                     }
//                     
//                     if (DBManager.Instance.GetDB<DBAvatarPart>().mData [fashion].part == DBAvatarPart.BODY_PART.RIDE)
//                     {
//                         this.RemotePlayerUsingRideId = fashion;
//                     }
//                 }
//             }
            
            if (DebugCommand.mTestRide)
            {
                this.RemotePlayerServerStatusRiding = true;
                this.RemotePlayerUsingRideId = 400001;
            }
        }

        /// <summary>
        /// 是否在骑乘坐骑，并且坐骑已经加载成功
        /// </summary>
        /// <returns></returns>
        public bool IsInRideAndResLoaded()
        {
            if (mCurrentRideId == 0)//没有坐骑
                return false;
            if (mIsprocessingRide) //正在加载坐骑
                return false;
            return true;
        }

        /// <summary>
        /// 没有骑乘坐骑，并且没有处于加载坐骑过程中,才返回true；其他都返回false
        /// </summary>
        /// <returns></returns>
        public bool IsInUnRideAndResLoaded()
        {
            if (mCurrentRideId != 0)//有坐骑
                return false;
            if (mIsprocessingRide) //正在加载坐骑
                return false;
            return true;
        }
    }
}

