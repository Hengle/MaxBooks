//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using Utils;
using xc.ui;
namespace xc
{
    public class ActorStateTransfering :Machine.State
    {


        private uint mTime = 0;//last time
        private Actor mActor;
        private float mStartTime;
        private bool mAutoStop;
        private static string mProgressBarName;
        private string mShowName;

        public ActorStateTransfering(uint id, Machine machine)
            :base(id, machine)
        {
            if (string.IsNullOrEmpty(mProgressBarName))
            {
                DBConstText db = DBManager.GetInstance().GetDB<DBConstText>();
                mProgressBarName = string.Format("{0}{1}", db.Text("TRANSFER"), db.Text("ING"));
            }
        }

        public override void Enter(params object[] param)
        {
            mActor = param[0] as Actor;
            if (param.Length > 1)
            {
                mTime = (uint)param [1];
            }
            else
            {
                mTime = 1;
            }
            if (param.Length > 2)
            {
                mAutoStop = (bool)param [2];
            }
            else
            {
                mAutoStop = false;
            }
            if (param.Length > 3)
            {
                mShowName = (string) param[3];
            }
            mActor.Play("idle");
            mActor.MoveCtrl.SendWalkEnd();
            mStartTime = UnityEngine.Time.fixedTime;
            base.Enter(param);
            //show progress bar
            // TODO C# UIMainmapWindow �ӿڲ����ã���Ҫ�ĳ��µĿ��Ʒ�ʽ

            //             var wnd = UIManager.GetInstance().GetWindowImm<UIMainmapWindow>();
            //             if (wnd != null && wnd.HasLoadedRes)
            //             {
            //                 wnd.ShowCommonProgressBar(true);
            //             }


        }

        public override void Update()
        {
            base.Update();
            if(mTime > 0)
            {
                // TODO C# UIMainmapWindow �ӿڲ����ã���Ҫ�ĳ��µĿ��Ʒ�ʽ
                //                 var wnd = UIManager.GetInstance().GetWindowImm<UIMainmapWindow>();
                //                 float dtime = UnityEngine.Time.fixedTime - mStartTime;
                //                 if (wnd != null && wnd.HasLoadedRes)
                //                 {
                //                     wnd.SetCommonProgress(UnityEngine.Mathf.Clamp01(dtime/mTime), string.IsNullOrEmpty(mShowName)? mProgressBarName:mShowName);
                //                 }
                //                 if(mAutoStop && dtime > mTime)
                //                 {
                //                     mMachine.React((uint)ActorMachine.EFSMEvent.DE_EndTransfer);
                //                     ClientEventMgr.GetInstance().FireEvent((int)ClientEvent.CE_STATUS_TRANSFER_AUTO_ENDED, new CEventBaseArgs(this));
                //                 }
            }
        }

        public override void Exit()
        {
            // TODO C# UIMainmapWindow �ӿڲ����ã���Ҫ�ĳ��µĿ��Ʒ�ʽ
            //hide progress bar
            //             var wnd = UIManager.GetInstance().GetWindowImm<UIMainmapWindow>();
            //             if (wnd != null && wnd.HasLoadedRes)
            //             {
            //                 wnd.ShowCommonProgressBar(false);
            //             }
            ClientEventMgr.GetInstance().FireEvent((int)ClientEvent.CE_STATUS_TRANSFER_EXIT, new CEventBaseArgs(this));
            base.Exit();
        }

    }
}

