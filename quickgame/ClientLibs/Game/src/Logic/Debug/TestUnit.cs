//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Net;
using xc.protocol;
using Utils;
namespace xc
{
    public class TestUnit : xc.Singleton<TestUnit>
    {
        public void Update()
        {
            if (Input.GetKeyUp(KeyCode.P))
            {
                mDisplayDebugDraw = !mDisplayDebugDraw;
            }
            else if(Input.GetKeyUp(KeyCode.R))
            {
                var debugUI = MainGame.DebugUI;
                if(debugUI != null)
                    debugUI.ProcessCommand("c:#group_drop&2051");
 
                //var good_info = GoodsHelper.GetGoodsInfo(20010);
                //string query_str = string.Format("SELECT * FROM {0} WHERE {0}.{1}=\"{2}\"", "data_goods", "gid", "20010");
                //var table_info = DBManager.Instance.QuerySqliteFirstRow(GlobalConfig.DBFile, query_str, false);
            }
            else if(Input.GetKeyUp(KeyCode.Y))
            {
                // 测试buff图标的异步加载逻辑
                MainGame.HeartBehavior.StartCoroutine(AddBuff());

                // 测试结婚烟花特效
                //MarryFireworkManager.Instance.Ignite(LocalPlayerManager.Instance.LocalActorAttribute.UnitId.obj_idx, 3825);

                // 测试环形缓存区
                /*Net.RingBuffer buffer = new RingBuffer(16 * 1024);
                var inBuffer = new byte[16 * 1024];
                inBuffer[0] = 1;
                inBuffer[16 * 1024 - 1] = 2;
                buffer.WriteBuffer(inBuffer, 0, inBuffer.Length);

                var outBuffer = new byte[16 * 1024];
                buffer.ReadBuffer(outBuffer, 0, 0, outBuffer.Length);

                buffer.Remove(16 * 1024);
                buffer.ReadBuffer(outBuffer, 0, 0, outBuffer.Length);

                inBuffer = new byte[1024];
                inBuffer[0] = 10;
                inBuffer[1024 - 1] = 20;
                buffer.WriteBuffer(inBuffer, 0, inBuffer.Length);
                outBuffer = new byte[1024];
                buffer.ReadBuffer(outBuffer, 0, 0, outBuffer.Length);*/

                // 测试Sqlite读表
                /*string query_str = string.Format("SELECT * FROM {0} WHERE {0}.{1}=\"{2}\"", "data_goods", "gid", "20010");
                var table_info = DBManager.Instance.QuerySqliteRow(GlobalConfig.DBFile, "data_goods", query_str);*/

                // 测试公告的正则表达式
                /*var db_notice = DBManager.Instance.GetDB<DBNotice>();
                if(db_notice != null)
                {
                    var notice = db_notice.GetNoticeById(3700);
                    var replace = notice.GetContent(new string[] { "1", "2", "8", "1", "9", "10","30","0","1", "2", "8", "1", "9", "10" });
                    Debug.Log(replace);
                }*/
            }
        }

        private static bool mDisplayDebugDraw = false;
        public static bool DisplayDebugDraw
        {
            get
            {
                return mDisplayDebugDraw;
            }

            set
            {
                mDisplayDebugDraw = value;
            }
        }

        float mBuffTime = 3.0f;

        IEnumerator AddBuff()
        {
            yield return null;

            // 测试buff图标的资源异步调用
            var localPlayer = Game.Instance.GetLocalPlayer();
            if (localPlayer != null)
            {
                localPlayer.BuffCtrl.AddBuff(20500, mBuffTime);

                yield return new WaitForSeconds(2.0f);

                localPlayer.BuffCtrl.AddBuff(29203, mBuffTime);
   
                localPlayer.BuffCtrl.AddBuff(20500, mBuffTime);
                localPlayer.BuffCtrl.AddBuff(20503, mBuffTime);
                localPlayer.BuffCtrl.AddBuff(20505, mBuffTime);
                localPlayer.BuffCtrl.AddBuff(20507, mBuffTime);
                localPlayer.BuffCtrl.AddBuff(20508, mBuffTime);

                yield return new WaitForSeconds(0.2f);
                localPlayer.BuffCtrl.DelBuff(20505);
            }
        }
    }
}

